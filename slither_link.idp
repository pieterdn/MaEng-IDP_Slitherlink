vocabulary V {
    // Types
    type cell_column        // Column of a cell
    type cell_row           // Row of a cell
    type point_column       // Column of a point, amount = amount of cell cols + 1
    type point_row          // Row of a point, amount = amount of cell rows + 1
    type cell_value         // Possible cell values

    // cells
    Value: (cell_column * cell_row) -> cell_value
    n_cell: (cell_column * cell_row * cell_column * cell_row) -> Bool
    e_cell: (cell_column * cell_row * cell_column * cell_row) -> Bool
    w_cell: (cell_column * cell_row * cell_column * cell_row) -> Bool
    s_cell: (cell_column * cell_row * cell_column * cell_row) -> Bool

    neighbor_cell: (cell_column * cell_row * cell_column * cell_row) -> Bool
    cell_point: (cell_column * cell_row * point_column * point_row) -> Bool

    nw_cp: (cell_column * cell_row * point_column * point_row) -> Bool
    ne_cp: (cell_column * cell_row * point_column * point_row) -> Bool
    sw_cp: (cell_column * cell_row * point_column * point_row) -> Bool
    se_cp: (cell_column * cell_row * point_column * point_row) -> Bool
    
    // Points
    n_point: (point_column * point_row * point_column * point_row) -> Bool
    e_point: (point_column * point_row * point_column * point_row) -> Bool
    s_point: (point_column * point_row * point_column * point_row) -> Bool
    w_point: (point_column * point_row * point_column * point_row) -> Bool
    
    neighbor_point: (point_column * point_row * point_column * point_row) -> Bool

    nw_pc: (point_column * point_row * cell_column * cell_row) -> Bool
    ne_pc: (point_column * point_row * cell_column * cell_row) -> Bool
    sw_pc: (point_column * point_row * cell_column * cell_row) -> Bool
    se_pc: (point_column * point_row * cell_column * cell_row) -> Bool

    // Lines
    line: (point_column * point_row * point_column * point_row) -> Bool
}

theory T:V {
    // Defines neighboring cells
    !x, x2 in cell_column: !y, y2 in cell_row: n_cell(x, y, x2, y2) | e_cell(x, y, x2, y2) | s_cell(x, y, x2, y2) | w_cell(x, y, x2, y2) <=> neighbor_cell(x, y, x2, y2).
    
    // Defines neighboring points
    !x, x2 in point_column: !y, y2 in point_row: n_point(x, y, x2, y2) | e_point(x, y, x2, y2) | s_point(x, y, x2, y2) | w_point(x, y, x2, y2) <=> neighbor_point(x, y, x2, y2).

    // Defines which points are part of which cells
    !x in cell_column: !y in cell_row: !x2 in point_column: !y2 in point_row: nw_cp(x, y, x2, y2) | ne_cp(x, y, x2, y2) | sw_cp(x, y, x2, y2) | se_cp(x, y, x2, y2) <=> cell_point(x, y, x2, y2).
    
    // Eliminates lines between not neighboring points
    !x, x2 in point_column: !y, y2 in point_row: ~neighbor_point(x, y, x2, y2) => ~line(x, y, x2, y2).
    
    // Out of every point starts/ends 0 or 2 lines 
    !x in point_column: !y in point_row: 
        (#{x2 in point_column, y2 in point_row: line(x, y, x2, y2)} + #{x2 in point_column, y2 in point_row: line(x2, y2, x, y)} = 0) | 
        (#{x2 in point_column, y2 in point_row: line(x, y, x2, y2)} + #{x2 in point_column, y2 in point_row: line(x2, y2, x, y)} = 2).

    // Every cell value is the sum of the surrounding lines
    !x in cell_column: !y in cell_row: Value(x,y) = -1 | Value(x,y) = (#{x1, x2 in point_column, y1, y2 in point_row: cell_point(x,y,x1,y1) & cell_point(x,y,x2,y2) & line(x1,y1,x2,y2)}).

    // A line can only be drawn between points in one direction
    !x, x2 in point_column: !y, y2 in point_row: line(x, y, x2, y2) => ~line(x2, y2, x, y).

    // The loop has to go in one direction
    !x1, x2 in point_column: !y1, y2 in point_row: ?x3 in point_column: ?y3 in point_row: line(x1, y1, x2, y2) => line(x2, y2, x3, y3).

    // [] 1. De lijnen moeten 1 doorlopende, niet kruisende kring vormen.
    //      [X] - Uit elk punt start geen of 2 lijnen (Zorgt voor geen kruisingen) 
    // [X] 2. De value van elke cel komt overeen met het aantal omringende lijnen.
   
}

structure S3:V {

//===================================3_X_3======================================
    // 3 by 3 Slitherlink option 1
    // -------------
    // | 0 | 2 | 3 |
    // -------------
    // |   | 2 |   |
    // -------------
    // |   | 1 | 2 |
    // -------------
    // Value := {(1, 1) -> 0, (2, 1) -> 2, (3, 1) -> 3, (2, 2) -> 2, (2, 3) -> 1, (3, 3) -> 2} else -1.
    // 3 by 3 Slitherlink option 2
    // -------------
    // | 3 |   | 1 |
    // -------------
    // | 3 |   |   |
    // -------------
    // |   |   | 1 |
    // -------------
    Value := {(1, 1) -> 3, (3, 1) -> 1, (1, 2) -> 3, (3, 3) -> 1} else -1.

//===========================
// idp structure for a 3 x 3
//===========================
        cell_column := {1, 2, 3}.
        cell_row := {1, 2, 3}.
        point_column := {1, 2, 3, 4}.
        point_row := {1, 2, 3, 4}.
        cell_value := {-1, 0, 1, 2, 3}.
        // cell relations, how one cell lies in relation to another
        n_cell := {(1, 2, 1, 1), (1, 3, 1, 2), (2, 2, 2, 1), (2, 3, 2, 2), (3, 2, 3, 1), (3, 3, 3, 2)}.
        e_cell := {(1, 1, 2, 1), (1, 2, 2, 2), (1, 3, 2, 3), (2, 1, 3, 1), (2, 2, 3, 2), (2, 3, 3, 3)}.
        s_cell := {(1, 1, 1, 2), (1, 2, 1, 3), (2, 1, 2, 2), (2, 2, 2, 3), (3, 1, 3, 2), (3, 2, 3, 3)}.
        w_cell := {(2, 1, 1, 1), (2, 2, 1, 2), (2, 3, 1, 3), (3, 1, 2, 1), (3, 2, 2, 2), (3, 3, 2, 3)}.
        // Point relations, how one point lies in relation to another
        n_point := {(1, 2, 1, 1), (1, 3, 1, 2), (1, 4, 1, 3), (2, 2, 2, 1), (2, 3, 2, 2), (2, 4, 2, 3), (3, 2, 3, 1), (3, 3, 3, 2), (3, 4, 3, 3), (4, 2, 4, 1), (4, 3, 4, 2), (4, 4, 4, 3)}.
        e_point := {(1, 1, 2, 1), (1, 2, 2, 2), (1, 3, 2, 3), (1, 4, 2, 4), (2, 1, 3, 1), (2, 2, 3, 2), (2, 3, 3, 3), (2, 4, 3, 4), (3, 1, 4, 1), (3, 2, 4, 2), (3, 3, 4, 3), (3, 4, 4, 4)}.
        s_point := {(1, 1, 1, 2), (1, 2, 1, 3), (1, 3, 1, 4), (2, 1, 2, 2), (2, 2, 2, 3), (2, 3, 2, 4), (3, 1, 3, 2), (3, 2, 3, 3), (3, 3, 3, 4), (4, 1, 4, 2), (4, 2, 4, 3), (4, 3, 4, 4)}.
        w_point := {(2, 1, 1, 1), (2, 2, 1, 2), (2, 3, 1, 3), (2, 4, 1, 4), (3, 1, 2, 1), (3, 2, 2, 2), (3, 3, 2, 3), (3, 4, 2, 4), (4, 1, 3, 1), (4, 2, 3, 2), (4, 3, 3, 3), (4, 4, 3, 4)}.
        // Point to cell relations, how a point lies in relation to a cell
        nw_cp := {(1, 1, 1, 1), (1, 2, 1, 2), (1, 3, 1, 3), (2, 1, 2, 1), (2, 2, 2, 2), (2, 3, 2, 3), (3, 1, 3, 1), (3, 2, 3, 2), (3, 3, 3, 3)}.
        ne_cp := {(1, 1, 2, 1), (1, 2, 2, 2), (1, 3, 2, 3), (2, 1, 3, 1), (2, 2, 3, 2), (2, 3, 3, 3), (3, 1, 4, 1), (3, 2, 4, 2), (3, 3, 4, 3)}.
        sw_cp := {(1, 1, 1, 2), (1, 2, 1, 3), (1, 3, 1, 4), (2, 1, 2, 2), (2, 2, 2, 3), (2, 3, 2, 4), (3, 1, 3, 2), (3, 2, 3, 3), (3, 3, 3, 4)}.
        se_cp := {(1, 1, 2, 2), (1, 2, 2, 3), (1, 3, 2, 4), (2, 1, 3, 2), (2, 2, 3, 3), (2, 3, 3, 4), (3, 1, 4, 2), (3, 2, 4, 3), (3, 3, 4, 4)}.
        // cell to point relations, how a cell lies in relation to a point
        nw_pc := {(2, 2, 1, 1), (2, 3, 1, 2), (2, 4, 1, 3), (3, 2, 2, 1), (3, 3, 2, 2), (3, 4, 2, 3), (4, 2, 3, 1), (4, 3, 3, 2), (4, 4, 3, 3)}.
        ne_pc := {(1, 2, 1, 1), (1, 3, 1, 2), (1, 4, 1, 3), (2, 2, 2, 1), (2, 3, 2, 2), (2, 4, 2, 3), (3, 2, 3, 1), (3, 3, 3, 2), (3, 4, 3, 3)}.
        sw_pc := {(2, 1, 1, 1), (2, 2, 1, 2), (2, 3, 1, 3), (3, 1, 2, 1), (3, 2, 2, 2), (3, 3, 2, 3), (4, 1, 3, 1), (4, 2, 3, 2), (4, 3, 3, 3)}.
        se_pc := {(1, 1, 1, 1), (1, 2, 1, 2), (1, 3, 1, 3), (2, 1, 2, 1), (2, 2, 2, 2), (2, 3, 2, 3), (3, 1, 3, 1), (3, 2, 3, 2), (3, 3, 3, 3)}.

//===========================
}

structure S5:V {


//===================================5_X_5======================================

    // 5 by 5 Slitherlink
    // ---------------------
    // | 3 |   | 3 | 2 |   |
    // ---------------------
    // |   | 2 |   |   | 2 |
    // ---------------------
    // |   | 3 |   | 3 | 0 |
    // ---------------------
    // |   |   | 1 | 2 |   |
    // ---------------------
    // |   | 2 | 2 | 2 |   |
    // ---------------------
    Value := {(1, 1) -> 3, (3, 1) -> 3, (4, 1) -> 2,
                 (2, 2) -> 2, (5, 2) -> 2,
                 (2, 3) -> 3, (4, 3) -> 3, (5, 3) -> 0,
                 (3, 4) -> 1, (4, 4) -> 2, 
                 (2, 5) -> 2, (3, 5) -> 2, (4, 5) -> 2
                } else -1.

//===========================
// idp structure for a 5 x 5
//===========================
        cell_column := {1, 2, 3, 4, 5}.
        cell_row := {1, 2, 3, 4, 5}.
        point_column := {1, 2, 3, 4, 5, 6}.
        point_row := {1, 2, 3, 4, 5, 6}.
        cell_value := {-1, 0, 1, 2, 3}.
        // cell relations, how one cell lies in relation to another
        n_cell := {(1, 2, 1, 1), (1, 3, 1, 2), (1, 4, 1, 3), (1, 5, 1, 4), (2, 2, 2, 1), (2, 3, 2, 2), (2, 4, 2, 3), (2, 5, 2, 4), (3, 2, 3, 1), (3, 3, 3, 2), (3, 4, 3, 3), (3, 5, 3, 4), (4, 2, 4, 1), (4, 3, 4, 2), (4, 4, 4, 3), (4, 5, 4, 4), (5, 2, 5, 1), (5, 3, 5, 
2), (5, 4, 5, 3), (5, 5, 5, 4)}.
        e_cell := {(1, 1, 2, 1), (1, 2, 2, 2), (1, 3, 2, 3), (1, 4, 2, 4), (1, 5, 2, 5), (2, 1, 3, 1), (2, 2, 3, 2), (2, 3, 3, 3), (2, 4, 3, 4), (2, 5, 3, 5), (3, 1, 4, 1), (3, 2, 4, 2), (3, 3, 4, 3), (3, 4, 4, 4), (3, 5, 4, 5), (4, 1, 5, 1), (4, 2, 5, 2), (4, 3, 5, 
3), (4, 4, 5, 4), (4, 5, 5, 5)}.
        s_cell := {(1, 1, 1, 2), (1, 2, 1, 3), (1, 3, 1, 4), (1, 4, 1, 5), (2, 1, 2, 2), (2, 2, 2, 3), (2, 3, 2, 4), (2, 4, 2, 5), (3, 1, 3, 2), (3, 2, 3, 3), (3, 3, 3, 4), (3, 4, 3, 5), (4, 1, 4, 2), (4, 2, 4, 3), (4, 3, 4, 4), (4, 4, 4, 5), (5, 1, 5, 2), (5, 2, 5, 
3), (5, 3, 5, 4), (5, 4, 5, 5)}.
        w_cell := {(2, 1, 1, 1), (2, 2, 1, 2), (2, 3, 1, 3), (2, 4, 1, 4), (2, 5, 1, 5), (3, 1, 2, 1), (3, 2, 2, 2), (3, 3, 2, 3), (3, 4, 2, 4), (3, 5, 2, 5), (4, 1, 3, 1), (4, 2, 3, 2), (4, 3, 3, 3), (4, 4, 3, 4), (4, 5, 3, 5), (5, 1, 4, 1), (5, 2, 4, 2), (5, 3, 4, 
3), (5, 4, 4, 4), (5, 5, 4, 5)}.
        // Point relations, how one point lies in relation to another
        n_point := {(1, 2, 1, 1), (1, 3, 1, 2), (1, 4, 1, 3), (1, 5, 1, 4), (1, 6, 1, 5), (2, 2, 2, 1), (2, 3, 2, 2), (2, 4, 2, 3), (2, 5, 2, 4), (2, 6, 2, 5), (3, 2, 3, 1), (3, 3, 3, 2), (3, 4, 3, 3), (3, 5, 3, 4), (3, 6, 3, 5), (4, 2, 4, 1), (4, 3, 4, 2), (4, 4, 4, 3), (4, 5, 4, 4), (4, 6, 4, 5), (5, 2, 5, 1), (5, 3, 5, 2), (5, 4, 5, 3), (5, 5, 5, 4), (5, 6, 5, 5), (6, 2, 6, 1), (6, 3, 6, 2), (6, 4, 6, 3), (6, 5, 6, 4), (6, 6, 6, 5)}.
        e_point := {(1, 1, 2, 1), (1, 2, 2, 2), (1, 3, 2, 3), (1, 4, 2, 4), (1, 5, 2, 5), (1, 6, 2, 6), (2, 1, 3, 1), (2, 2, 3, 2), (2, 3, 3, 3), (2, 4, 3, 4), (2, 5, 3, 5), (2, 6, 3, 6), (3, 1, 4, 1), (3, 2, 4, 2), (3, 3, 4, 3), (3, 4, 4, 4), (3, 5, 4, 5), (3, 6, 4, 6), (4, 1, 5, 1), (4, 2, 5, 2), (4, 3, 5, 3), (4, 4, 5, 4), (4, 5, 5, 5), (4, 6, 5, 6), (5, 1, 6, 1), (5, 2, 6, 2), (5, 3, 6, 3), (5, 4, 6, 4), (5, 5, 6, 5), (5, 6, 6, 6)}.
        s_point := {(1, 1, 1, 2), (1, 2, 1, 3), (1, 3, 1, 4), (1, 4, 1, 5), (1, 5, 1, 6), (2, 1, 2, 2), (2, 2, 2, 3), (2, 3, 2, 4), (2, 4, 2, 5), (2, 5, 2, 6), (3, 1, 3, 2), (3, 2, 3, 3), (3, 3, 3, 4), (3, 4, 3, 5), (3, 5, 3, 6), (4, 1, 4, 2), (4, 2, 4, 3), (4, 3, 4, 4), (4, 4, 4, 5), (4, 5, 4, 6), (5, 1, 5, 2), (5, 2, 5, 3), (5, 3, 5, 4), (5, 4, 5, 5), (5, 5, 5, 6), (6, 1, 6, 2), (6, 2, 6, 3), (6, 3, 6, 4), (6, 4, 6, 5), (6, 5, 6, 6)}.
        w_point := {(2, 1, 1, 1), (2, 2, 1, 2), (2, 3, 1, 3), (2, 4, 1, 4), (2, 5, 1, 5), (2, 6, 1, 6), (3, 1, 2, 1), (3, 2, 2, 2), (3, 3, 2, 3), (3, 4, 2, 4), (3, 5, 2, 5), (3, 6, 2, 6), (4, 1, 3, 1), (4, 2, 3, 2), (4, 3, 3, 3), (4, 4, 3, 4), (4, 5, 3, 5), (4, 6, 3, 6), (5, 1, 4, 1), (5, 2, 4, 2), (5, 3, 4, 3), (5, 4, 4, 4), (5, 5, 4, 5), (5, 6, 4, 6), (6, 1, 5, 1), (6, 2, 5, 2), (6, 3, 5, 3), (6, 4, 5, 4), (6, 5, 5, 5), (6, 6, 5, 6)}.
        // Point to cell relations, how a point lies in relation to a cell
        nw_cp := {(1, 1, 1, 1), (1, 2, 1, 2), (1, 3, 1, 3), (1, 4, 1, 4), (1, 5, 1, 5), (2, 1, 2, 1), (2, 2, 2, 2), (2, 3, 2, 3), (2, 4, 2, 4), (2, 5, 2, 5), (3, 1, 3, 1), (3, 2, 3, 2), (3, 3, 3, 3), (3, 4, 3, 4), (3, 5, 3, 5), (4, 1, 4, 1), (4, 2, 4, 2), (4, 3, 4, 3), (4, 4, 4, 4), (4, 5, 4, 5), (5, 1, 5, 1), (5, 2, 5, 2), (5, 3, 5, 3), (5, 4, 5, 4), (5, 5, 5, 5)}.
        ne_cp := {(1, 1, 2, 1), (1, 2, 2, 2), (1, 3, 2, 3), (1, 4, 2, 4), (1, 5, 2, 5), (2, 1, 3, 1), (2, 2, 3, 2), (2, 3, 3, 3), (2, 4, 3, 4), (2, 5, 3, 5), (3, 1, 4, 1), (3, 2, 4, 2), (3, 3, 4, 3), (3, 4, 4, 4), (3, 5, 4, 5), (4, 1, 5, 1), (4, 2, 5, 2), (4, 3, 5, 3), (4, 4, 5, 4), (4, 5, 5, 5), (5, 1, 6, 1), (5, 2, 6, 2), (5, 3, 6, 3), (5, 4, 6, 4), (5, 5, 6, 5)}.
        sw_cp := {(1, 1, 1, 2), (1, 2, 1, 3), (1, 3, 1, 4), (1, 4, 1, 5), (1, 5, 1, 6), (2, 1, 2, 2), (2, 2, 2, 3), (2, 3, 2, 4), (2, 4, 2, 5), (2, 5, 2, 6), (3, 1, 3, 2), (3, 2, 3, 3), (3, 3, 3, 4), (3, 4, 3, 5), (3, 5, 3, 6), (4, 1, 4, 2), (4, 2, 4, 3), (4, 3, 4, 4), (4, 4, 4, 5), (4, 5, 4, 6), (5, 1, 5, 2), (5, 2, 5, 3), (5, 3, 5, 4), (5, 4, 5, 5), (5, 5, 5, 6)}.
        se_cp := {(1, 1, 2, 2), (1, 2, 2, 3), (1, 3, 2, 4), (1, 4, 2, 5), (1, 5, 2, 6), (2, 1, 3, 2), (2, 2, 3, 3), (2, 3, 3, 4), (2, 4, 3, 5), (2, 5, 3, 6), (3, 1, 4, 2), (3, 2, 4, 3), (3, 3, 4, 4), (3, 4, 4, 5), (3, 5, 4, 6), (4, 1, 5, 2), (4, 2, 5, 3), (4, 3, 5, 4), (4, 4, 5, 5), (4, 5, 5, 6), (5, 1, 6, 2), (5, 2, 6, 3), (5, 3, 6, 4), (5, 4, 6, 5), (5, 5, 6, 6)}.
        // cell to point relations, how a cell lies in relation to a point
        nw_pc := {(2, 2, 1, 1), (2, 3, 1, 2), (2, 4, 1, 3), (2, 5, 1, 4), (2, 6, 1, 5), (3, 2, 2, 1), (3, 3, 2, 2), (3, 4, 2, 3), (3, 5, 2, 4), (3, 6, 2, 5), (4, 2, 3, 1), (4, 3, 3, 2), (4, 4, 3, 3), (4, 5, 3, 4), (4, 6, 3, 5), (5, 2, 4, 1), (5, 3, 4, 2), (5, 4, 4, 3), (5, 5, 4, 4), (5, 6, 4, 5), (6, 2, 5, 1), (6, 3, 5, 2), (6, 4, 5, 3), (6, 5, 5, 4), (6, 6, 5, 5)}.
        ne_pc := {(1, 2, 1, 1), (1, 3, 1, 2), (1, 4, 1, 3), (1, 5, 1, 4), (1, 6, 1, 5), (2, 2, 2, 1), (2, 3, 2, 2), (2, 4, 2, 3), (2, 5, 2, 4), (2, 6, 2, 5), (3, 2, 3, 1), (3, 3, 3, 2), (3, 4, 3, 3), (3, 5, 3, 4), (3, 6, 3, 5), (4, 2, 4, 1), (4, 3, 4, 2), (4, 4, 4, 3), (4, 5, 4, 4), (4, 6, 4, 5), (5, 2, 5, 1), (5, 3, 5, 2), (5, 4, 5, 3), (5, 5, 5, 4), (5, 6, 5, 5)}.
        sw_pc := {(2, 1, 1, 1), (2, 2, 1, 2), (2, 3, 1, 3), (2, 4, 1, 4), (2, 5, 1, 5), (3, 1, 2, 1), (3, 2, 2, 2), (3, 3, 2, 3), (3, 4, 2, 4), (3, 5, 2, 5), (4, 1, 3, 1), (4, 2, 3, 2), (4, 3, 3, 3), (4, 4, 3, 4), (4, 5, 3, 5), (5, 1, 4, 1), (5, 2, 4, 2), (5, 3, 4, 3), (5, 4, 4, 4), (5, 5, 4, 5), (6, 1, 5, 1), (6, 2, 5, 2), (6, 3, 5, 3), (6, 4, 5, 4), (6, 5, 5, 5)}.
        se_pc := {(1, 1, 1, 1), (1, 2, 1, 2), (1, 3, 1, 3), (1, 4, 1, 4), (1, 5, 1, 5), (2, 1, 2, 1), (2, 2, 2, 2), (2, 3, 2, 3), (2, 4, 2, 4), (2, 5, 2, 5), (3, 1, 3, 1), (3, 2, 3, 2), (3, 3, 3, 3), (3, 4, 3, 4), (3, 5, 3, 5), (4, 1, 4, 1), (4, 2, 4, 2), (4, 3, 4, 3), (4, 4, 4, 4), (4, 5, 4, 5), (5, 1, 5, 1), (5, 2, 5, 2), (5, 3, 5, 3), (5, 4, 5, 4), (5, 5, 5, 5)}.

//===========================   
}

procedure main() {
    pretty_print(model_expand(T, S5, timeout_seconds = 180))
}
